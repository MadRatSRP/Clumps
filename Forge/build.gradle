buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.blamejared.com' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
        classpath group: 'com.blamejared', name: 'ModTemplate', version: '2.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.blamejared.modtemplate'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'
apply plugin: 'com.matthewprenger.cursegradle'

import com.blamejared.modtemplate.Utils

archivesBaseName = "${mod_name}-forge-${minecraft_version}"
version = Utils.updatingVersion(mod_version)
group = mod_group

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
    add sourceSets.main, "clumps.refmap.json"
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            arg "--mixin=clumps.mixins.json"
            mods {
                clumps {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            arg "--mixin=clumps.mixins.json"
            mods {
                clumps {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), "--mixin=clumps.mixins.json"
            mods {
                clumps {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

modTemplate {
    mcVersion minecraft_version
    curseHomepage curse_homepage
    displayName mod_name
    modLoader "Forge"
    changelog {
        enabled true
        firstCommit git_first_commit
        repo git_repo
    }
    versionTracker {
        enabled true
        author mod_author
        projectName mod_name
    }
    webhook {
        enabled true
        curseId curse_project_id
        avatarUrl mod_avatar
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")

    annotationProcessor 'org.spongepowered:mixin:0.8.4-SNAPSHOT:processor'
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_name,
                "Specification-Vendor"    : mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "clumps.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')


publish.dependsOn(project.tasks.getByName("assemble"))
publish.mustRunAfter(project.tasks.getByName("build"))

publishing {

    publications {

        mavenJava(MavenPublication) {

            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            // Allows the maven pom file to be modified.
            pom.withXml {

                // Go through all the dependencies.
                asNode().dependencies.dependency.each { dep ->

                    println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                    assert dep.parent().remove(dep)
                }
            }

        }
    }

    repositories {

        maven {

            url "file://" + System.getenv("local_maven")
        }
    }
}

curseforge {

    apiKey = findProperty('curseforge_api_token') ?: 0
    project {
        id = curse_project_id
        releaseType = 'release'
        changelog = file("changelog.md")
        changelogType = 'markdown'
        addGameVersion "Forge"
        addGameVersion minecraft_version

//        addArtifact(sourcesJar)
//        addArtifact(javadocJar)
//        addArtifact(deobfJar)
    }
}

////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

sourceSets {
    main {
        output.resourcesDir(file('out/main/resources'))
        java.destinationDirectory.set(file('out/main/classes'))
        resources {
            srcDir 'src/generated/resources'
        }
    }
}